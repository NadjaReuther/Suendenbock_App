// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Suendenbock_App.Data;

#nullable disable

namespace Suendenbock_App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250923071340_RemoveBerufTable")]
    partial class RemoveBerufTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Abenteuerrang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Abenteuerraenge");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Anmeldungsstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Anmeldungsstati");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Blutgruppe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Besonderheiten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Blutgruppen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlutgruppeId")
                        .HasColumnType("int");

                    b.Property<int>("CompletionLevel")
                        .HasColumnType("int");

                    b.Property<int>("EindruckId")
                        .HasColumnType("int");

                    b.Property<string>("Geburtsdatum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Geschlecht")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuildId")
                        .HasColumnType("int");

                    b.Property<int?>("HausId")
                        .HasColumnType("int");

                    b.Property<int?>("HerkunftslandId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InfanterierangId")
                        .HasColumnType("int");

                    b.Property<int>("LebensstatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MutterId")
                        .HasColumnType("int");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RasseId")
                        .HasColumnType("int");

                    b.Property<int?>("RegimentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("Rufname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StandId")
                        .HasColumnType("int");

                    b.Property<int?>("VaterId")
                        .HasColumnType("int");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlutgruppeId");

                    b.HasIndex("EindruckId");

                    b.HasIndex("GuildId");

                    b.HasIndex("HausId");

                    b.HasIndex("HerkunftslandId");

                    b.HasIndex("InfanterierangId");

                    b.HasIndex("LebensstatusId");

                    b.HasIndex("MutterId");

                    b.HasIndex("RasseId");

                    b.HasIndex("RegimentId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StandId");

                    b.HasIndex("VaterId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.CharacterAffiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("GuildId")
                        .HasColumnType("int");

                    b.Property<int?>("InfanterierangId")
                        .HasColumnType("int");

                    b.Property<int?>("RegimentsId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.HasIndex("InfanterierangId");

                    b.HasIndex("RegimentsId");

                    b.HasIndex("ReligionId");

                    b.ToTable("CharacterAffiliations");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.CharacterDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beruf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlutgruppeId")
                        .HasColumnType("int");

                    b.Property<int?>("BodyHeight")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HausId")
                        .HasColumnType("int");

                    b.Property<int?>("HerkunftslandId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StandId")
                        .HasColumnType("int");

                    b.Property<string>("quote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urheber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlutgruppeId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("HausId");

                    b.HasIndex("HerkunftslandId");

                    b.HasIndex("StandId");

                    b.ToTable("CharacterDetails");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.CharacterMagicClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MagicClassId")
                        .HasColumnType("int");

                    b.Property<int?>("MagicClassSpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MagicClassId");

                    b.HasIndex("MagicClassSpecializationId");

                    b.ToTable("CharacterMagicClasses");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Eindruck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Eindruecke");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Gildenlizenz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GuildId")
                        .HasColumnType("int");

                    b.Property<int>("LizenzenId")
                        .HasColumnType("int");

                    b.Property<int?>("LizenzenId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("LizenzenId");

                    b.HasIndex("LizenzenId1");

                    b.ToTable("Gildenlizenzen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Grundzauber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effekt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MagicClassId")
                        .HasColumnType("int");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<string>("Spruch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stufe")
                        .HasColumnType("int");

                    b.Property<string>("Wirkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZaubertypID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MagicClassId");

                    b.HasIndex("ZaubertypID");

                    b.ToTable("Grundzauber");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbenteuerrangId")
                        .HasColumnType("int");

                    b.Property<int?>("AbenteuerrangId1")
                        .HasColumnType("int");

                    b.Property<int>("AnmeldungsstatusId")
                        .HasColumnType("int");

                    b.Property<int?>("AnmeldungsstatusId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LightCardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("leader")
                        .HasColumnType("int");

                    b.Property<string>("quote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urheber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("vertreter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbenteuerrangId");

                    b.HasIndex("AbenteuerrangId1");

                    b.HasIndex("AnmeldungsstatusId");

                    b.HasIndex("AnmeldungsstatusId1");

                    b.HasIndex("LightCardId");

                    b.HasIndex("leader");

                    b.HasIndex("vertreter");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Haus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Haeuser");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Herkunftsland", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Herkunftslaender");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Infanterie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LightCardId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sitz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("leader")
                        .HasColumnType("int");

                    b.Property<int?>("vertreter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("leader");

                    b.HasIndex("vertreter");

                    b.ToTable("Infanterien");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Infanterierang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Infanterieraenge");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Lebensstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lebensstati");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.LightCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farbcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LightCards");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Lizenzen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lizenzen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.MagicClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObermagieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObermagieId");

                    b.ToTable("MagicClasses");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.MagicClassSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MagicClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MagicClassId");

                    b.ToTable("MagicClassSpecializations");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonstertypId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("encounter")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MonstertypId");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsteranfaelligkeiten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monsteranfaelligkeiten");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstergruppen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monstergruppen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsterimmunitaeten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monsterimmunitaeten");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsterintelligenz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monsterintelligenzen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertyp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonstergruppenId")
                        .HasColumnType("int");

                    b.Property<int?>("MonstergruppenId1")
                        .HasColumnType("int");

                    b.Property<int>("MonsterintelligenzId")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterintelligenzId1")
                        .HasColumnType("int");

                    b.Property<int>("MonsterwuerfelId")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterwuerfelId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonstergruppenId");

                    b.HasIndex("MonstergruppenId1");

                    b.HasIndex("MonsterintelligenzId");

                    b.HasIndex("MonsterintelligenzId1");

                    b.HasIndex("MonsterwuerfelId");

                    b.HasIndex("MonsterwuerfelId1");

                    b.ToTable("MonsterTypes");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertypanfaelligkeiten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MonsteranfaelligkeitenId")
                        .HasColumnType("int");

                    b.Property<int?>("MonsteranfaelligkeitenId1")
                        .HasColumnType("int");

                    b.Property<int>("MonstertypId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonsteranfaelligkeitenId");

                    b.HasIndex("MonsteranfaelligkeitenId1");

                    b.HasIndex("MonstertypId");

                    b.ToTable("Monstertypanfaelligkeiten");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertypimmunitaeten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MonsterimmunitaetenId")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterimmunitaetenId1")
                        .HasColumnType("int");

                    b.Property<int>("MonstertypId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonsterimmunitaetenId");

                    b.HasIndex("MonsterimmunitaetenId1");

                    b.HasIndex("MonstertypId");

                    b.ToTable("Monstertypimmunitaeten");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertypvorkommen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MonstertypId")
                        .HasColumnType("int");

                    b.Property<int>("MonstervorkommenId")
                        .HasColumnType("int");

                    b.Property<int?>("MonstervorkommenId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonstertypId");

                    b.HasIndex("MonstervorkommenId");

                    b.HasIndex("MonstervorkommenId1");

                    b.ToTable("Monstertypvorkommen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstervorkommen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monstervorkommen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsterwuerfel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Wuerfel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monsterwuerfel");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Obermagie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LightCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LightCardId");

                    b.ToTable("Obermagien");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Rasse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rassen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Regiment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Adjutant")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfanterieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Regimentsleiter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Adjutant");

                    b.HasIndex("InfanterieId");

                    b.HasIndex("Regimentsleiter");

                    b.ToTable("Regiments");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.SpecialZauber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effekt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MagicClassSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<string>("Spruch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stufe")
                        .HasColumnType("int");

                    b.Property<string>("Wirkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZaubertypID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MagicClassSpecializationId");

                    b.HasIndex("ZaubertypID");

                    b.ToTable("SpecialZauber");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Stand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Staende");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Zaubertyp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschreibung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zaubertypen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Character", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Blutgruppe", null)
                        .WithMany("Charaktere")
                        .HasForeignKey("BlutgruppeId");

                    b.HasOne("Suendenbock_App.Models.Domain.Eindruck", "Eindruck")
                        .WithMany("Charaktere")
                        .HasForeignKey("EindruckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Guild", null)
                        .WithMany("Characters")
                        .HasForeignKey("GuildId");

                    b.HasOne("Suendenbock_App.Models.Domain.Haus", null)
                        .WithMany("Characters")
                        .HasForeignKey("HausId");

                    b.HasOne("Suendenbock_App.Models.Domain.Herkunftsland", null)
                        .WithMany("Characters")
                        .HasForeignKey("HerkunftslandId");

                    b.HasOne("Suendenbock_App.Models.Domain.Infanterierang", null)
                        .WithMany("Characters")
                        .HasForeignKey("InfanterierangId");

                    b.HasOne("Suendenbock_App.Models.Domain.Lebensstatus", "Lebensstatus")
                        .WithMany("Characters")
                        .HasForeignKey("LebensstatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Character", "Mutter")
                        .WithMany()
                        .HasForeignKey("MutterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Rasse", "Rasse")
                        .WithMany("Characters")
                        .HasForeignKey("RasseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Regiment", null)
                        .WithMany("Characters")
                        .HasForeignKey("RegimentId");

                    b.HasOne("Suendenbock_App.Models.Domain.Religion", null)
                        .WithMany("Characters")
                        .HasForeignKey("ReligionId");

                    b.HasOne("Suendenbock_App.Models.Domain.Stand", null)
                        .WithMany("Characters")
                        .HasForeignKey("StandId");

                    b.HasOne("Suendenbock_App.Models.Domain.Character", "Vater")
                        .WithMany()
                        .HasForeignKey("VaterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Eindruck");

                    b.Navigation("Lebensstatus");

                    b.Navigation("Mutter");

                    b.Navigation("Rasse");

                    b.Navigation("Vater");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.CharacterAffiliation", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Character", "Character")
                        .WithOne("Affiliation")
                        .HasForeignKey("Suendenbock_App.Models.Domain.CharacterAffiliation", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Infanterierang", "Infanterierang")
                        .WithMany()
                        .HasForeignKey("InfanterierangId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Regiment", "Regiment")
                        .WithMany()
                        .HasForeignKey("RegimentsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Character");

                    b.Navigation("Guild");

                    b.Navigation("Infanterierang");

                    b.Navigation("Regiment");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.CharacterDetails", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Blutgruppe", "Blutgruppe")
                        .WithMany()
                        .HasForeignKey("BlutgruppeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Character", "Character")
                        .WithOne("Details")
                        .HasForeignKey("Suendenbock_App.Models.Domain.CharacterDetails", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Haus", "Haus")
                        .WithMany()
                        .HasForeignKey("HausId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Herkunftsland", "Herkunftsland")
                        .WithMany()
                        .HasForeignKey("HerkunftslandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Stand", "Stand")
                        .WithMany()
                        .HasForeignKey("StandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Blutgruppe");

                    b.Navigation("Character");

                    b.Navigation("Haus");

                    b.Navigation("Herkunftsland");

                    b.Navigation("Stand");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.CharacterMagicClass", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Character", "Character")
                        .WithMany("CharacterMagicClasses")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.MagicClass", "MagicClass")
                        .WithMany("CharacterMagicClasses")
                        .HasForeignKey("MagicClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.MagicClassSpecialization", "MagicClassSpecialization")
                        .WithMany()
                        .HasForeignKey("MagicClassSpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Character");

                    b.Navigation("MagicClass");

                    b.Navigation("MagicClassSpecialization");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Gildenlizenz", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Guild", "Guild")
                        .WithMany("Gildenlizenzen")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Lizenzen", "Lizenzen")
                        .WithMany()
                        .HasForeignKey("LizenzenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Lizenzen", null)
                        .WithMany("Gildenlizenzen")
                        .HasForeignKey("LizenzenId1");

                    b.Navigation("Guild");

                    b.Navigation("Lizenzen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Grundzauber", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.MagicClass", "MagicClass")
                        .WithMany()
                        .HasForeignKey("MagicClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Zaubertyp", null)
                        .WithMany("Grundzaubers")
                        .HasForeignKey("ZaubertypID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicClass");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Guild", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Abenteuerrang", "AbenteuerrangNavigation")
                        .WithMany()
                        .HasForeignKey("AbenteuerrangId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Abenteuerrang", null)
                        .WithMany("Guilds")
                        .HasForeignKey("AbenteuerrangId1");

                    b.HasOne("Suendenbock_App.Models.Domain.Anmeldungsstatus", "AnmeldungsstatusNavigation")
                        .WithMany()
                        .HasForeignKey("AnmeldungsstatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Anmeldungsstatus", null)
                        .WithMany("Guilds")
                        .HasForeignKey("AnmeldungsstatusId1");

                    b.HasOne("Suendenbock_App.Models.Domain.LightCard", "LightCard")
                        .WithMany()
                        .HasForeignKey("LightCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Character", "LeaderCharacter")
                        .WithMany()
                        .HasForeignKey("leader")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Character", "VertreterCharacter")
                        .WithMany()
                        .HasForeignKey("vertreter")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AbenteuerrangNavigation");

                    b.Navigation("AnmeldungsstatusNavigation");

                    b.Navigation("LeaderCharacter");

                    b.Navigation("LightCard");

                    b.Navigation("VertreterCharacter");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Infanterie", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Character", "LeaderCharacter")
                        .WithMany()
                        .HasForeignKey("leader")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Character", "VertreterCharacter")
                        .WithMany()
                        .HasForeignKey("vertreter")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LeaderCharacter");

                    b.Navigation("VertreterCharacter");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.MagicClass", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Obermagie", "Obermagie")
                        .WithMany()
                        .HasForeignKey("ObermagieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Obermagie");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.MagicClassSpecialization", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.MagicClass", "MagicClass")
                        .WithMany("MagicClassSpecializations")
                        .HasForeignKey("MagicClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicClass");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monster", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Monstertyp", "Monstertyp")
                        .WithMany("Monster")
                        .HasForeignKey("MonstertypId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Monstertyp");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertyp", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Monstergruppen", "Monstergruppen")
                        .WithMany()
                        .HasForeignKey("MonstergruppenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Monstergruppen", null)
                        .WithMany("Monstertypen")
                        .HasForeignKey("MonstergruppenId1");

                    b.HasOne("Suendenbock_App.Models.Domain.Monsterintelligenz", "Monsterintelligenz")
                        .WithMany()
                        .HasForeignKey("MonsterintelligenzId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Monsterintelligenz", null)
                        .WithMany("Monstertypen")
                        .HasForeignKey("MonsterintelligenzId1");

                    b.HasOne("Suendenbock_App.Models.Domain.Monsterwuerfel", "Monsterwuerfel")
                        .WithMany()
                        .HasForeignKey("MonsterwuerfelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Monsterwuerfel", null)
                        .WithMany("Monstertypen")
                        .HasForeignKey("MonsterwuerfelId1");

                    b.Navigation("Monstergruppen");

                    b.Navigation("Monsterintelligenz");

                    b.Navigation("Monsterwuerfel");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertypanfaelligkeiten", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Monsteranfaelligkeiten", "Monsteranfaelligkeiten")
                        .WithMany()
                        .HasForeignKey("MonsteranfaelligkeitenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Monsteranfaelligkeiten", null)
                        .WithMany("Monstertypanfaelligkeiten")
                        .HasForeignKey("MonsteranfaelligkeitenId1");

                    b.HasOne("Suendenbock_App.Models.Domain.Monstertyp", "Monstertyp")
                        .WithMany("MonstertypAnfaelligkeiten")
                        .HasForeignKey("MonstertypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monsteranfaelligkeiten");

                    b.Navigation("Monstertyp");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertypimmunitaeten", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Monsterimmunitaeten", "Monsterimmunitaeten")
                        .WithMany()
                        .HasForeignKey("MonsterimmunitaetenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Monsterimmunitaeten", null)
                        .WithMany("Monstertypimmunitaeten")
                        .HasForeignKey("MonsterimmunitaetenId1");

                    b.HasOne("Suendenbock_App.Models.Domain.Monstertyp", "Monstertyp")
                        .WithMany("MonstertypImmunitaeten")
                        .HasForeignKey("MonstertypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monsterimmunitaeten");

                    b.Navigation("Monstertyp");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertypvorkommen", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Monstertyp", "Monstertyp")
                        .WithMany("MonstertypenVorkommen")
                        .HasForeignKey("MonstertypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Monstervorkommen", "Monstervorkommen")
                        .WithMany()
                        .HasForeignKey("MonstervorkommenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Monstervorkommen", null)
                        .WithMany("MonstertypenVorkommen")
                        .HasForeignKey("MonstervorkommenId1");

                    b.Navigation("Monstertyp");

                    b.Navigation("Monstervorkommen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Obermagie", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.LightCard", "LightCard")
                        .WithMany("Obermagie")
                        .HasForeignKey("LightCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LightCard");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Regiment", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.Character", "AdjutantCharacter")
                        .WithMany()
                        .HasForeignKey("Adjutant")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Suendenbock_App.Models.Domain.Infanterie", "Infanterie")
                        .WithMany("Regiments")
                        .HasForeignKey("InfanterieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Character", "RegimentsCharacter")
                        .WithMany()
                        .HasForeignKey("Regimentsleiter")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AdjutantCharacter");

                    b.Navigation("Infanterie");

                    b.Navigation("RegimentsCharacter");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.SpecialZauber", b =>
                {
                    b.HasOne("Suendenbock_App.Models.Domain.MagicClassSpecialization", "MagicClassSpecialization")
                        .WithMany()
                        .HasForeignKey("MagicClassSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Suendenbock_App.Models.Domain.Zaubertyp", null)
                        .WithMany("SpecialZaubers")
                        .HasForeignKey("ZaubertypID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicClassSpecialization");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Abenteuerrang", b =>
                {
                    b.Navigation("Guilds");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Anmeldungsstatus", b =>
                {
                    b.Navigation("Guilds");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Blutgruppe", b =>
                {
                    b.Navigation("Charaktere");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Character", b =>
                {
                    b.Navigation("Affiliation");

                    b.Navigation("CharacterMagicClasses");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Eindruck", b =>
                {
                    b.Navigation("Charaktere");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Guild", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Gildenlizenzen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Haus", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Herkunftsland", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Infanterie", b =>
                {
                    b.Navigation("Regiments");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Infanterierang", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Lebensstatus", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.LightCard", b =>
                {
                    b.Navigation("Obermagie");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Lizenzen", b =>
                {
                    b.Navigation("Gildenlizenzen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.MagicClass", b =>
                {
                    b.Navigation("CharacterMagicClasses");

                    b.Navigation("MagicClassSpecializations");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsteranfaelligkeiten", b =>
                {
                    b.Navigation("Monstertypanfaelligkeiten");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstergruppen", b =>
                {
                    b.Navigation("Monstertypen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsterimmunitaeten", b =>
                {
                    b.Navigation("Monstertypimmunitaeten");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsterintelligenz", b =>
                {
                    b.Navigation("Monstertypen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstertyp", b =>
                {
                    b.Navigation("Monster");

                    b.Navigation("MonstertypAnfaelligkeiten");

                    b.Navigation("MonstertypImmunitaeten");

                    b.Navigation("MonstertypenVorkommen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monstervorkommen", b =>
                {
                    b.Navigation("MonstertypenVorkommen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Monsterwuerfel", b =>
                {
                    b.Navigation("Monstertypen");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Rasse", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Regiment", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Religion", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Stand", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Suendenbock_App.Models.Domain.Zaubertyp", b =>
                {
                    b.Navigation("Grundzaubers");

                    b.Navigation("SpecialZaubers");
                });
#pragma warning restore 612, 618
        }
    }
}
