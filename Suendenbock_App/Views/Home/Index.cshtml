@{
        ViewData["Title"] = "Suendenbock - Fandom";
}
@model HomeViewModel

@section Styles {
        <link href="/css/antique-home.css" rel="stylesheet" />
        <link href="/css/character.css" rel="stylesheet" />
        <link href="https://fonts.googleapis.com/css2?family=MedievalSharp&family=Uncial+Antiqua&family=Cinzel:wght@400;600&display=swap" rel="stylesheet">
}
<!-- Header -->
<header class="antique-header">
    <h1 class="main-title">Sündenbock 1618</h1>
</header>

<div class="main-container">
    <!-- Hero Pergament Karten mit echten Daten -->
    <section class="hero-section">
        
        <div class="pergament-card" data-tilt>
            <a class="card-link" asp-controller="Home" asp-action="CharacterOverview">
            <div class="card-corner top-left"></div>
            <div class="card-corner top-right"></div>
            <div class="card-corner bottom-left"></div>
            <div class="card-corner bottom-right"></div>

            <div class="card-number">@Model.Characters.Count</div>
            <h3 class="card-title">Charaktere</h3>
            <div class="card-content">
                Eingetragene Persönlichkeiten<br>
                aus allen Reichen und Ständen
            </div>
            </a>
        </div>
        
        <div class="pergament-card" data-tilt>
            <a class="card-link" asp-controller="Home" asp-action="InfanterieOverview">
            <div class="card-corner top-left"></div>
            <div class="card-corner top-right"></div>
            <div class="card-corner bottom-left"></div>
            <div class="card-corner bottom-right"></div>

            <div class="card-number">@Model.Infanteries.Count</div>
            <h3 class="card-title">Infanterien</h3>
            <div class="card-content">
                Organisierte Bünde<br>
                des Militärs
            </div>
            </a>
        </div>

        <div class="pergament-card" data-tilt>
            <a class="card-link" asp-controller="Home" asp-action="GuildOverview">
            <div class="card-corner top-left"></div>
            <div class="card-corner top-right"></div>
            <div class="card-corner bottom-left"></div>
            <div class="card-corner bottom-right"></div>

            <div class="card-number">@Model.Guilds.Count</div>
            <h3 class="card-title">Gilden</h3>
            <div class="card-content">
                Organisierte Bünde<br>
                für Abenteurer
            </div>
            </a>
        </div>
            <div class="pergament-card" data-tilt>
        <a class="card-link" asp-controller="Home" asp-action="MonsterOverview">

                <div class="card-corner top-left"></div>
                <div class="card-corner top-right"></div>
                <div class="card-corner bottom-left"></div>
                <div class="card-corner bottom-right"></div>

                <div class="card-number">@Model.Monstertyps.Count</div>
                <h3 class="card-title">Monstertypen</h3>
                <div class="card-content">
                    Ungeheuer und andere Wesen<br>
                    des Reiches
                </div>
            </a>
            </div>
        
    </section>
    <!-- Sternzeichen Übersicht -->
    <section class="zodiac-section">
        <h2 class="section-title">
            <span class="title-decoration left">✨</span>
            Sternzeichen
            <span class="title-decoration right">✨</span>
        </h2>

        <div class="zodiac-chart-container">
            <canvas id="zodiacChart"></canvas>
        </div>
    </section>

    <!-- Gilden Sektion -->
    <section class="guild-section">
        <h2 class="section-title">
            <span class="title-decoration left">⚜</span>
            Ehrenwerte Gilden
            <span class="title-decoration right">⚜</span>
        </h2>

        <div class="guild-scroll">
            <div class="scroll-content">
                @foreach (var guild in Model.Guilds.Take(6))
                {
                        <div class="guild-banner">
                            <div class="banner-pole"></div>
                            <div class="banner-flag">
                                <img src="@guild.ImagePath" alt="@guild.Name" onerror="this.style.display='none';">
                                <div class="guild-name">@guild.Name</div>
                            </div>
                        </div>
                }
            </div>
        </div>
    </section>

    <!-- Statistiken mit Vintage-Design -->
    <section class="stats-section">
        <div class="stats-parchment">
            <div class="parchment-header">
                <h2 class="stats-title">Reichsstatistiken</h2>
            </div>

            <div class="stats-content">
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-icon">⚔️</div>
                        <span class="stat-number" data-target="@(Model.GenderStats.ContainsKey("männlich") ? Model.GenderStats["männlich"] : 0)">0</span>
                        <span class="stat-label">Männliche Charaktere</span>
                    </div>

                    <div class="stat-item">
                        <div class="stat-icon">🌹</div>
                        <span class="stat-number" data-target="@(Model.GenderStats.ContainsKey("weiblich") ? Model.GenderStats["weiblich"] : 0)">0</span>
                        <span class="stat-label">Weibliche Charaktere</span>
                    </div>

                    <div class="stat-item">
                        <div class="stat-icon">🔮</div>
                        <span class="stat-number" data-target="@Model.Characters.Where(c => c.CharacterMagicClasses.Any()).Count()">0</span>
                        <span class="stat-label">Aktive Zauberer</span>
                    </div>

                    <div class="stat-item">
                        <div class="stat-icon">🏰</div>
                        <span class="stat-number" data-target="@Model.Guilds.Count">0</span>
                        <span class="stat-label">Gilden & Bünde</span>
                    </div>
                </div>

                <!-- Magiklassen-Verteilung -->
                <div class="magic-distribution">
                    <h3>Verteilung der Magieschulen</h3>
                    <div class="distribution-bars">
                        @foreach (var stat in Model.MagicClassStats.Take(5))
                        {
                                <div class="distribution-item">
                                    <span class="distribution-label">@stat.Key</span>
                                    <div class="distribution-bar">
                                        <div class="distribution-fill" style="width: @(Math.Max(5, (stat.Value * 100) / Math.Max(1, Model.MagicClassStats.Values.Max())))%"></div>
                                        <span class="distribution-value">@stat.Value</span>
                                    </div>
                                </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

@section Scripts {
    <!-- NEU: Chart.js Bibliothek einbinden -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Animierte Zahlen für Statistiken
                const numbers = document.querySelectorAll('.stat-number');
                numbers.forEach(number => {
                    const target = parseInt(number.getAttribute('data-target'));
                    let current = 0;
                    const increment = target / 50;

                    const timer = setInterval(() => {
                        current += increment;
                        if (current >= target) {
                            number.textContent = target;
                            clearInterval(timer);
                        } else {
                            number.textContent = Math.floor(current);
                        }
                    }, 50);
                });

                // Tilt-Effekt für Karten
                document.querySelectorAll('[data-tilt]').forEach(card => {
                    card.addEventListener('mousemove', (e) => {
                        const rect = card.getBoundingClientRect();
                        const x = e.clientX - rect.left;
                        const y = e.clientY - rect.top;

                        const centerX = rect.width / 2;
                        const centerY = rect.height / 2;

                        const rotateX = (y - centerY) / 10;
                        const rotateY = (centerX - x) / 10;

                        card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.05, 1.05, 1.05)`;
                    });

                    card.addEventListener('mouseleave', () => {
                        card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)';
                    });
                });

                // Parallax für Dekorationen
                window.addEventListener('scroll', () => {
                    const scrolled = window.pageYOffset;
                    const decorations = document.querySelectorAll('.vintage-decorations > div');

                    decorations.forEach((decoration, index) => {
                        const speed = (index % 3 + 1) * 0.1;
                        decoration.style.transform += ` translateY(${scrolled * speed}px)`;
                    });
                });

                // Schwebende Animation für Dekorationen
                document.querySelectorAll('.vintage-decorations > div').forEach((decoration, index) => {
                    decoration.style.animation = `float ${3 + index}s ease-in-out infinite`;
                    decoration.style.animationDelay = `${index * 0.5}s`;
                });
            });

        // Sternzeichen-Daten
        const zodiacDataFromServer = @Html.Raw(Json.Serialize(Model.ZodiacStats));

        const zodiacSigns = [
            {
                name: 'Widder',
                symbol: '♈',
                element: 'Feuer',
                info: 'bisher nicht aktiviert',
                characters: zodiacDataFromServer['Widder'] || []
            },
            {
                name: 'Stier',
                symbol: '♉',
                element: 'Erde',
                info: 'Effekt: Stände sind egal',
                characters: zodiacDataFromServer['Stier'] || []
            },
            {
                name: 'Zwillinge',
                symbol: '♊',
                element: 'Luft',
                info: 'Effekt: keine Lügen',
                characters: zodiacDataFromServer['Zwillinge'] || []
            },
            {
                name: 'Krebs',
                symbol: '♋',
                element: 'Wasser',
                info: 'Effekt: doppelter Sozialwert',
                characters: zodiacDataFromServer['Krebs'] || []
            },
            {
                name: 'Löwe',
                symbol: '♌',
                element: 'Feuer',
                info: 'Effekt: Nachteil bei Beeinflussung',
                characters: zodiacDataFromServer['Löwe'] || []
            },
            {
                name: 'Jungfrau',
                symbol: '♍',
                element: 'Erde',
                info: 'Effekt: Kritwerte halbiert',
                characters: zodiacDataFromServer['Jungfrau'] || []
            },
            {
                name: 'Waage',
                symbol: '♎',
                element: 'Luft',
                info: 'Effekt: keine Handelsfähigkeiten',
                characters: zodiacDataFromServer['Waage'] || []
            },
            {
                name: 'Skorpion',
                symbol: '♏',
                element: 'Wasser',
                info: 'Effekt: keine Menschenkenntnistalente',
                characters: zodiacDataFromServer['Skorpion'] || []
            },
            {
                name: 'Schütze',
                symbol: '♐',
                element: 'Feuer',
                info: 'bisher nicht aktiviert',
                characters: zodiacDataFromServer['Schütze'] || []
            },
            {
                name: 'Steinbock',
                symbol: '♑',
                element: 'Erde',
                info: 'Effekt: Wissenstalente im Vorteil',
                characters: zodiacDataFromServer['Steinbock'] || []
            },
            {
                name: 'Wassermann',
                symbol: '♒',
                element: 'Luft',
                info: 'Effekt: einen zusätzlichen Geistesblitzpunkt in Soziales',
                characters: zodiacDataFromServer['Wassermann'] || []
            },
            {
                name: 'Fische',
                symbol: '♓',
                element: 'Wasser',
                info: 'bisher nicht aktiviert',
                characters: zodiacDataFromServer['Fische'] || []
            }
        ];

        const elementColors = {
            'Feuer': '#8B0000',      // Dunkles Burgunderrot (wie Drachenblut-Pigment)
            'Erde': '#6B4423',       // Reiches Erdbraun (wie Umbra)
            'Luft': '#5F7A8A',       // Schieferblau (wie verblasstes Azurit)
            'Wasser': '#1B4D6D'      // Tiefes Marineblau (wie Indigo)
        };
        
        // NEU: Plugin zum Zeichnen der Symbole IN den Tortenstücken
        const zodiacSymbolPlugin = {
            id: 'zodiacSymbols',
            afterDatasetsDraw(chart) {
                const { ctx, chartArea: { width, height } } = chart;
                const centerX = width / 2;
                const centerY = height / 2;
                
                chart.data.datasets.forEach((dataset, datasetIndex) => {
                    const meta = chart.getDatasetMeta(datasetIndex);
                    
                    meta.data.forEach((arc, index) => {
                        // Berechne die Mitte des Tortenstücks
                        const angle = (arc.startAngle + arc.endAngle) / 2;
                        const radius = (arc.innerRadius + arc.outerRadius) / 2;
                        
                        // Position für das Symbol
                        const x = centerX + Math.cos(angle) * (radius+50);
                        const y = centerY + Math.sin(angle) * (radius+50);

                        // Symbol zeichnen
                        ctx.save();
                        ctx.font = 'bold 32px "Segoe UI Symbol", "DejaVu Sans", Arial';
                        ctx.fillStyle = '#ffffff';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';

                        // Schatten für bessere Lesbarkeit
                        ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';  // Dunklerer Schatten
                        ctx.shadowBlur = 6;
                        ctx.shadowOffsetX = 2;
                        ctx.shadowOffsetY = 2;

                        // WICHTIG: Zweimal zeichnen für solidere Farbe
                        ctx.fillText(zodiacSigns[index].symbol, x, y);
                        ctx.shadowColor = 'transparent';  // Schatten ausschalten
                        ctx.fillText(zodiacSigns[index].symbol, x, y);  // Nochmal ohne Schatten
                        ctx.restore();
                    });
                });
            }
        };
        
        // Tortendiagramm erstellen
        const ctx = document.getElementById('zodiacChart').getContext('2d');
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: zodiacSigns.map(z => z.name), // Namen statt Symbole für Legende
                datasets: [{
                    data: Array(12).fill(1), // Alle gleich groß
                    backgroundColor: zodiacSigns.map(z => elementColors[z.element]),
                    borderWidth: 3,
                    borderColor: '#fff',
                    hoverBorderWidth: 5,
                    hoverBorderColor: '#6e4b1f'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                         display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(110, 75, 31, 0.95)',
                        titleFont: { size: 18, family: 'Cinzel' },
                        bodyFont: { size: 14, family: 'MedievalSharp' },
                        padding: 15,
                        borderColor: '#d4af37',
                        borderWidth: 2,
                        callbacks: {
                            title: function(context) {
                                const index = context[0].dataIndex;
                                const sign = zodiacSigns[index];
                                return `${sign.symbol} ${sign.name}`;
                            },
                            label: function(context) {
                                return '';
                            },
                            afterLabel: function(context) {
                                const index = context.dataIndex;
                                const sign = zodiacSigns[index];
                                
                                let lines = [
                                    `Element: ${sign.element}`,
                                    '',
                                    sign.info
                                ];
                                
                                // Später: Charaktere aus Datenbank
                                if (sign.characters.length > 0) {
                                    lines.push('');
                                    lines.push('Charaktere:');
                                    sign.characters.forEach(char => {
                                        lines.push(`• ${char}`);
                                    });
                                }
                                
                                return lines;
                            }
                        }
                    }
                }
            },
            plugins: [zodiacSymbolPlugin] // NEU: Plugin registrieren
        });
        </script>
}
